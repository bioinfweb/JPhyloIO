/*
 * JPhyloIO - Event based parsing and stream writing of multiple sequence alignment and tree formats. 
 * Copyright (C) 2015-2016  Ben St√∂ver, Sarah Wiechers
 * <http://bioinfweb.info/JPhyloIO>
 * 
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package info.bioinfweb.jphyloio.formats.nexus;


import static info.bioinfweb.jphyloio.test.JPhyloIOTestTools.*;
import static org.junit.Assert.*;
import info.bioinfweb.jphyloio.EventWriterParameterMap;
import info.bioinfweb.jphyloio.LabelEditingReporter;
import info.bioinfweb.jphyloio.ReadWriteConstants;
import info.bioinfweb.jphyloio.dataadapters.implementations.ListBasedDocumentDataAdapter;
import info.bioinfweb.jphyloio.events.LabeledIDEvent;
import info.bioinfweb.jphyloio.events.type.EventContentType;
import info.bioinfweb.jphyloio.test.dataadapters.SingleTokenTestMatrixDataAdapter;
import info.bioinfweb.jphyloio.test.dataadapters.TestMatrixDataAdapter;
import info.bioinfweb.jphyloio.test.dataadapters.TestOTUListDataAdapter;
import info.bioinfweb.jphyloio.test.dataadapters.TestSingleTokenSetAdapter;
import info.bioinfweb.jphyloio.test.dataadapters.TestTreeDataAdapter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import org.junit.Test;



public class NexusEventWriterTest implements NexusConstants {
	@Test
	public void test_writeDocument() throws Exception {
		File file = new File("data/testOutput/Test.nex");
		
		// Write file:
		ListBasedDocumentDataAdapter document = new ListBasedDocumentDataAdapter();
		SingleTokenTestMatrixDataAdapter matrix = new SingleTokenTestMatrixDataAdapter("matrix0", "a matrix", true, 
				"Label 1", "ACTGC", null, "A-TCC", null, "ACTTC");
		TestOTUListDataAdapter otuList = matrix.createAccordingOTUList(0); 
		document.getOTUListsMap().put(otuList.getListStartEvent().getID(), otuList);
		document.getMatrices().add(matrix);
		
		String otuID = ReadWriteConstants.DEFAULT_OTU_ID_PREFIX + "2";
		otuList.getOtus().put(otuID, new LabeledIDEvent(EventContentType.OTU, otuID, null));  // Set last OTU label to null
		
		matrix.setLinkedOTUsID("otus0");
		matrix.setTokenSets(new TestSingleTokenSetAdapter());
		
		TestTreeDataAdapter tree = new TestTreeDataAdapter("tree0", "first tree", new String[]{"otu0", "otu1", "otu2"});
		tree.setLinkedOTUsID("otus0");
		document.getTreesNetworks().add(tree);
		document.getTreesNetworks().add(new TestTreeDataAdapter("tree1", "second tree"));
		
		NexusEventWriter writer = new NexusEventWriter();
		EventWriterParameterMap parameterMap = new EventWriterParameterMap();
		parameterMap.put(EventWriterParameterMap.KEY_APPLICATION_COMMENT, "Some application comment.");
		writer.writeDocument(document, file, parameterMap);
		
		// Validate file:
		BufferedReader reader = new BufferedReader(new FileReader(file));
		try {
			assertEquals(FIRST_LINE, reader.readLine());
			assertEquals(COMMENT_START + "Some application comment." + COMMENT_END, reader.readLine());
			assertTrue(reader.readLine().matches(
					"\\[This file was generated by an application using JPhyloIO \\d+\\.\\d+\\.\\d+-\\d+ .+. <http://bioinfweb.info/JPhyloIO/>\\]"));
			assertEquals("", reader.readLine());
			
			assertEquals("BEGIN TAXA;", reader.readLine());
			assertEquals("\tTITLE OTU_list_0;", reader.readLine());
			assertEquals("\tDIMENSIONS NTAX=3;", reader.readLine());
			assertEquals("\tTAXLABELS", reader.readLine());
			assertEquals("\t\t\tOTU_otu0", reader.readLine());
			assertEquals("\t\t\tOTU_otu1", reader.readLine());
			assertEquals("\t\t\totu2;", reader.readLine());  // No label present.
			assertEquals("END;", reader.readLine());
			assertEquals("", reader.readLine());
			//TODO Taxa need to have unique names. (Two labels must not be identical and a label and an ID must not be identical.)
			
			assertEquals("BEGIN CHARACTERS;", reader.readLine());
			assertEquals("\tTITLE a_matrix;", reader.readLine());
			assertEquals("\tDIMENSIONS NTAX=3 NCHAR=5;", reader.readLine());
			assertEquals("\tFORMAT DATATYPE=DNA GAP=- MISSING=? MATCHCHAR=. SYMBOLS=\"A T C G\" NOTOKENS;", reader.readLine());
			assertEquals("\tMATRIX", reader.readLine());
			assertEquals("\t\t\tOTU_otu0 ACT[comment 1]GC", reader.readLine());
			assertEquals("\t\t\tOTU_otu1 A-TCC", reader.readLine());
			assertEquals("\t\t\totu2 ACTTC;", reader.readLine());
			assertEquals("END;", reader.readLine());
			assertEquals("", reader.readLine());

			assertEquals("BEGIN TREES;", reader.readLine());
			assertEquals("\tTREE first_tree = [&R] ((OTU_otu0:1.1[&annotation=100], OTU_otu1:0.9)'Node ''_1'[&a1=100, a2='ab ''c']:1.0, otu2:2.0)Node_nRoot:1.5;", reader.readLine());
			assertEquals("\tTREE second_tree = [&R] ((Node_nA:1.1[&annotation=100], Node_nB:0.9)'Node ''_1'[&a1=100, a2='ab ''c']:1.0, Node_nC:2.0)Node_nRoot:1.5;", reader.readLine());
			assertEquals("END;", reader.readLine());
			
			assertEquals(-1, reader.read());
		}
		finally {
			reader.close();
			file.delete();
		}
	}
	
	
	@Test
	public void test_writeDocument_conflictingLabels() throws Exception {
		File file = new File("data/testOutput/ConflictingLabels.nex");
		
		// Write file:
		ListBasedDocumentDataAdapter document = new ListBasedDocumentDataAdapter();
		TestOTUListDataAdapter otuList = new TestOTUListDataAdapter(0, 
				new LabeledIDEvent(EventContentType.OTU, "otu0", "label1"),
				new LabeledIDEvent(EventContentType.OTU, "otu1", null),
				new LabeledIDEvent(EventContentType.OTU, "otu2", "otu0"),
				new LabeledIDEvent(EventContentType.OTU, "otu3", "otu0"),
				new LabeledIDEvent(EventContentType.OTU, "otu4", "otu3_otu0"),
				new LabeledIDEvent(EventContentType.OTU, "otu5", "otu7"),
				new LabeledIDEvent(EventContentType.OTU, "otu6", "otu7_2"),
				new LabeledIDEvent(EventContentType.OTU, "otu7", null)); 
		document.getOTUListsMap().put(otuList.getListStartEvent().getID(), otuList);
		TestMatrixDataAdapter matrix = new TestMatrixDataAdapter("matrix0", "a matrix", false, 
				"ACGT", "ACCT", "AC-T", "AGGT", "AG-T", "TCGT", "CCGT", "GCGT");
		document.getMatrices().add(matrix);
		
		NexusEventWriter writer = new NexusEventWriter();
		EventWriterParameterMap parameters = new EventWriterParameterMap();
		writer.writeDocument(document, file, parameters);
		
		// Validate file:
		BufferedReader reader = new BufferedReader(new FileReader(file));
		try {
			assertEquals(FIRST_LINE, reader.readLine());
			assertTrue(reader.readLine().matches(
					"\\[This file was generated by an application using JPhyloIO \\d+\\.\\d+\\.\\d+-\\d+ .+. <http://bioinfweb.info/JPhyloIO/>\\]"));
			assertEquals("", reader.readLine());
			
			assertEquals("BEGIN TAXA;", reader.readLine());
			assertEquals("\tTITLE OTU_list_0;", reader.readLine());
			assertEquals("\tDIMENSIONS NTAX=8;", reader.readLine());
			assertEquals("\tTAXLABELS", reader.readLine());
			assertEquals("\t\t\tlabel1", reader.readLine());
			assertEquals("\t\t\totu1", reader.readLine());
			assertEquals("\t\t\totu0", reader.readLine());
			assertEquals("\t\t\t'otu3_otu0'", reader.readLine());
			assertEquals("\t\t\t'otu4_otu3_otu0'", reader.readLine());
			assertEquals("\t\t\totu7", reader.readLine());
			assertEquals("\t\t\t'otu7_2'", reader.readLine());
			assertEquals("\t\t\t'otu7_3';", reader.readLine());
			assertEquals("END;", reader.readLine());
			assertEquals("", reader.readLine());
			
			LabelEditingReporter reporter = parameters.getLabelEditingReporter();
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.UNCHANGED, "label1", EventContentType.OTU, "otu0", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.EDITED, "otu1", EventContentType.OTU, "otu1", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.UNCHANGED, "otu0", EventContentType.OTU, "otu2", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.EDITED, "otu3_otu0", EventContentType.OTU, "otu3", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.EDITED, "otu4_otu3_otu0", EventContentType.OTU, "otu4", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.UNCHANGED, "otu7", EventContentType.OTU, "otu5", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.UNCHANGED, "otu7_2", EventContentType.OTU, "otu6", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.EDITED, "otu7_3", EventContentType.OTU, "otu7", reporter);
			assertEditedLabelMapping(LabelEditingReporter.LabelStatus.NOT_FOUND, null, EventContentType.OTU, "otherID", reporter);

			assertEquals(-1, reader.read());
		}
		finally {
			reader.close();
			file.delete();
		}
	}
}
